filter {
  if [type] == "fail2ban" {
    grok {
      patterns_dir => ["/etc/logstash/patterns/grok"]
      break_on_match => true
      match => [
        "message", "%{FAIL2BAN_BAN_OLD}",
        "message", "%{FAIL2BAN_BAN_NEW}"
        ]
      add_tag => [ "ip_ban" ]
      named_captures_only => true
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns/grok"]
      break_on_match => true
      match => [
        "message", "%{FAIL2BAN_UNBAN_OLD}",
        "message", "%{FAIL2BAN_UNBAN_NEW}"
        ]
      add_tag => [ "ip_unban" ]
      named_captures_only => true
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns/grok"]
      break_on_match => true
      match => [ "message", "%{FAIL2BAN_ALREADYBAN_OLD}" ]
      add_tag => [ "ip_already_banned" ]
      named_captures_only => true
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns/grok"]
      break_on_match => true
      match => [ "message", "%{FAIL2BAN_FOUND_NEW}" ]
      add_tag => [ "ip_found" ]
      named_captures_only => true
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns/grok"]
      break_on_match => true
      match => [
        "message", "%{FAIL2BAN_ERROR_OLD}",
        "message", "%{FAIL2BAN_ERROR_NEW}"
        ]
      add_tag => [ "fail2ban_error" ]
      named_captures_only => true
    }
    geoip {
      source => "clientip"
      target => "geoip"
      database => "/var/lib/GeoIP/GeoLite2-City.mmdb"
      fields => ["country_name", "region_name", "city_name", "location"]
    }

    mutate {
      remove_tag => ["_grokparsefailure"]
    }
  }
}
