require 'httparty'
require 'json'
require 'time'

class PagerDutyClient
  SUBDOMAIN     = <%= @pagerduty_subdomain %>
  API_TOKEN     = <%= @pagerduty_api_token %>
  POLICY        = <%= @pagerduty_policy %>
  TOKEN_STRING  = "Token token=#{API_TOKEN}"
  ENDPOINT      = "https://#{SUBDOMAIN}.pagerduty.com"
  #returns data from pagerduty api
  def get_from_api(api_url)
    response = HTTParty.get(
      "#{ENDPOINT}#{api_url}",
      headers: {
      'Content-Type' => 'application/json', 'Authorization' => TOKEN_STRING
      }
    )
    return response.body
  end
  #get array of hashes for users on call
  def get_on_call_status
    target = '/api/v1/users/on_call'
    data   = get_from_api(target)
    json   =  JSON.parse(data)
    if is_empty(json)
      return []
    end
    #user['on_call'][0]['escalation_policy']['name']
    users = Array.new
    json['users'].each do |user|
      if user['on_call'][0]['escalation_policy']['name'] == POLICY
        users << get_user_status_info(user)
      end
    end
    return users
  end

  #get array of hashes for current incidents
  def get_incidents
    target = '/api/v1/incidents'
    data   = get_from_api(target)
    json   =  JSON.parse(data)
    if is_empty(json)
      return []
    end
    incidents = Array.new
    json['incidents'].each{|incident| incidents << get_incident_data(incident)}
    return incidents
  end

  #get array of hashses for acknowledged incidents
  def get_triggered_incidents
    target = '/api/v1/incidents?status=triggered'
    data   = get_from_api(target)
    json   =  JSON.parse(data)
    if is_empty(json)
      return []
    end
    incidents = Array.new
    json['incidents'].each{|incident| incidents << get_incident_data(incident)}
    return incidents
  end

  #get array of hashses for acknowledged incidents
  def get_acked_incidents
    target = '/api/v1/incidents?status=acknowledged'
    data   = get_from_api(target)
    json   =  JSON.parse(data)
    if is_empty(json)
      return []
    end
    incidents = Array.new
    json['incidents'].each{|incident| incidents << get_incident_data(incident)}
    return incidents
  end


  private 
    def is_empty(json_data)
      if json_data['total'].to_i <= 0
        return true
      else
        return false
      end
    end

    def get_user_status_info(user)
      data = Hash.new
      data['id']    = user['id']
      data['name']  =  user['name']
      data['email'] =  user['email']
      data['policy_name'] = user['on_call'][0]['escalation_policy']['name']
      data['start'] = strip_time(user['on_call'][0]['start'])
      data['end']   = strip_time(user['on_call'][0]['end'])
      return data
    end

    def get_incident_data(incident_record)
      data = Hash.new
      data['id'] = incident_record['id']
      data['incident_number'] = incident_record['incident_number']
      data['create_on'] = strip_time(incident_record['created_on'])
      data['status'] = incident_record['status']
      data['name'] = incident_record['service']['name']
      data['escalation_policy'] = incident_record['escalation_policy']['name']
      if data.has_key?("assigned_to_user")
        data['assigned_to'] = incident_record['assigned_to_user']['name']
      end
      return data
    end

    def strip_time(time)
      return Time.strptime(time, "%Y-%m-%dT%H:%M:%SZ")
        .strftime("%Y-%m-%d, %H:%M:%S")
    end
end
