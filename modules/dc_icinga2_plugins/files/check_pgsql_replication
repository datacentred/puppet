#!/usr/bin/env python

"""
Checks streaming replication on a Postgres cluster is working

Adapted from a script by Benjamin Renard
http://git.zionetrix.net/check_pg_streaming_replication
"""

import argparse
import os
import subprocess
import sys

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

VARDIR = '/var/lib/postgresql/9.5/main'


def psql_exec(command):
    """Execute the specified command via psql"""

    cmd = ['su', '-', 'postgres', '-c', 'psql -t -P format=unaligned']
    process = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate(command)

    if process.returncode != 0:
        print 'UNKNOWN: unable to execute psql command: {}'.format(command)
        print stderr
        sys.exit(NAGIOS_UNKNOWN)

    # All output will have an newline termination, discard it
    return stdout.rstrip()


def psql_exec_remote(command, host, port, password):
    """Exec the specified command via psql on a remote host"""

    cmd = ['su', '-', 'postgres', '-c',
           'PGPASSWORD={} psql -h {} -p {} -t -P format=unaligned'.\
           format(password, host, port)]
    process = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate(command)

    if process.returncode != 0:
        print 'UNKNOWN: unable to execute remote psql command: {}'.\
              format(command)
        print stderr
        sys.exit(NAGIOS_UNKNOWN)

    # All output will have an newline termination, discard it
    return stdout.rstrip()


def get_primary_connection_info(args, filename):
    """Extract primary connection data as a dictionary"""

    with open(filename, 'r') as config:
        lines = config.readlines()

    # We expect the configuration to look like
    # primary_conninfo = 'key1=value1 key2=value2'
    conninfo = next(x for x in lines if x.startswith('primary_conninfo'))
    conninfo = conninfo.split('\'')[1]

    # Extract all text: ['key1=value1', 'key2=value2']
    # Add the config items to the cli arguments
    for item in conninfo.split(' '):
        key, val = item.split('=')
        setattr(args, key, val)


def get_position(xlog):
    """Convert an xlog into a scalar value"""

    log, offt = xlog.split('/')
    return int(log, 16) * 0x100000000 + int(offt, 16)


def check_standby_generic(args, curr, last):
    """Generic checker to compare against thresholds and alert"""

    delta = curr - last
    if delta > args.critical:
        return NAGIOS_CRITICAL
    if delta > args.warning:
        return NAGIOS_WARNING
    return NAGIOS_OK


def check_standby(args):
    """Checks XLOGs are up to date with the master and have been replayed"""

    # Get local statistics
    xlog_receive = psql_exec('SELECT pg_last_xlog_receive_location();')
    xlog_replay = psql_exec('SELECT pg_last_xlog_replay_location();')

    # Get master statistics
    xlog_current = psql_exec_remote('SELECT pg_current_xlog_location();',
                                    args.host, args.port,
                                    args.password)

    current = get_position(xlog_current)
    receive = get_position(xlog_receive)
    replay = get_position(xlog_replay)

    receive_lag = current - receive
    replay_lag = current - replay

    code = NAGIOS_OK
    code = max(code, check_standby_generic(args, current, receive))
    code = max(code, check_standby_generic(args, current, replay))

    status = ['OK', 'WARNING', 'CRITICAL'][code]
    print ('{0}: current={1} receive={2} replay={3} | '
           'receive={4};{6};{7} replay={5};{6};{7}').\
          format(status, xlog_current, xlog_receive, xlog_replay,
                 receive_lag, replay_lag, args.warning, args.critical)
    sys.exit(code)


def check_master():
    """Checks node is not in recovery mode and has clients connected"""

    # Check whether postgres is in recovery
    recovery_mode = psql_exec('SELECT pg_is_in_recovery();') == 't'
    if recovery_mode:
        print 'CRITICAL: master in recovery mode'
        sys.exit(NAGIOS_CRITICAL)

    # Get all standby clients
    clients = psql_exec(('SELECT client_addr, sync_state '
                         'FROM pg_stat_replication;')).split("\n")

    if not len(clients):
        print 'WARNING: no standby clients connected'
        sys.exit(NAGIOS_WARNING)

    # Format the output
    output = ', '.join(['{} (mode={})'.format(*x.split('|')) for x in clients])
    print 'OK: {} standby client(s) connected - '.format(len(clients)) + output
    sys.exit(NAGIOS_OK)


def main():
    """Performs the correct checks based on configuration"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--password', required=True)
    parser.add_argument('-w', '--warning', type=int, default=0)
    parser.add_argument('-c', '--critical', type=int, default=0)
    args = parser.parse_args()

    recovery_config = '{}/recovery.conf'.format(VARDIR)

    if os.access(recovery_config, os.F_OK):
        get_primary_connection_info(args, recovery_config)
        check_standby(args)
    else:
        check_master()


if __name__ == '__main__':
    main()

# vi: ts=4 et:
