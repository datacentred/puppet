#!/usr/bin/env python
""" The script receives a rule and a list of routers. Checks if the routers
    are present on the current node and if they do, it checks their iptables rules
    to see if there is a match"""
from __future__ import print_function
from subprocess import check_output
import argparse
import sys
import socket

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

def findlocal(routers):
    """ Find the routers that are on this node from the list """

    namespaces = check_output(['ip', 'netns']).splitlines()
    router_ids = [ns.split('-', 1)[1] for ns in namespaces if ns.startswith('qrouter')]
    return [router for router in routers if router in router_ids]

def checkforrule(routerstocheck, rule, hostname):
    """ Check if the rule we are looking for is present on any of the selected local routers."""

    results = []
    for routerid in routerstocheck:
        ruletable = check_output(['ip', 'netns', 'exec', 'qrouter-'+routerid, 'iptables-save', '-t', 'filter']) # pylint: disable=line-too-long
        if rule not in ruletable:
            results.append(routerid + ' @ ' + hostname + ' missing rule ' + rule)
    return results

def main():
    """Main"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--rule', help='Rule to search for', required=True)
    parser.add_argument('-i', nargs='*', help='IDs of routers to check', action='store')

    args = parser.parse_args()
    localname = socket.gethostname()
    routers = args.i

    routerstocheck = findlocal(routers)
    if routerstocheck:
        finalres = checkforrule(routerstocheck, args.rule, localname)
        if finalres:
            for line in finalres:
                print(line)
            sys.exit(NAGIOS_WARNING)
        else:
            print('No errors')
            sys.exit(NAGIOS_OK)
    else:
        print('No routers present on this node')
        sys.exit(NAGIOS_OK)

if __name__ == "__main__":
    main()
