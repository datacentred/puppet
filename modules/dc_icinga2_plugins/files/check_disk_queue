#!/usr/bin/env python
"""
Checks Disk Queue Depths

By default checks a rotational storage device's queue depth is below warning
and critical thresholds.  The thresholds are specified as a percentage of the
current disk queue depth.
"""

import argparse
import json
import sys

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

def proc_dev_to_sysfs_dev(dev):
    """Translate procfs device name into that used by sysfs"""

    # On HP blades facter returns block devices as cciss/c0d0 which correctly
    # addresses the device in /proc/diskstats however when generating hisory
    # files this adds an implicit directory and sysfs refers to cciss!c0d0.
    # The latter form can be used for both sysfs and file creation.
    return dev.replace('/', '!')


def get_last(dev):
    """Gets the raw results from the previous N runs"""

    try:
        with open('/tmp/check_disk_queue.{}.json'.format(dev)) as historyfd:
            return json.loads(historyfd.read())
    except IOError:
        return []


def set_last(dev, last):
    """Sets the raw results fron the last N runs"""

    with open('/tmp/check_disk_queue.{}.json'.format(dev), 'w') as historyfd:
        historyfd.write(json.dumps(last))


def get_average_depth(dev, average, depth):
    """Loads/saves the history and calculates and average depth"""

    # Load and prune history to N-1 entries
    last = get_last(dev)
    if len(last) >= average:
        last = last[:average-1]

    # Push the new depth to the front and save
    last.insert(0, depth)
    set_last(dev, last)

    # Return the average depth
    return reduce(lambda x, y: x+y, last) / average


def main():
    """Checks whether the requested block device has a large queue depth"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dev', required=True)
    parser.add_argument('-a', '--average', type=int)
    parser.add_argument('-w', '--warn', type=int, required=True)
    parser.add_argument('-c', '--crit', type=int, required=True)
    args = parser.parse_args()

    # Derive the queue depth from sysfs
    dev = proc_dev_to_sysfs_dev(args.dev)
    try:
        with open('/sys/block/{}/queue/nr_requests'.format(dev)) as reqfd:
            nr_requests = int(reqfd.read())
    except IOError:
        print 'UNKNOWN: unable to read device queue depth'
        sys.exit(NAGIOS_UNKNOWN)

    # Get the queue depth from proc
    with open('/proc/diskstats') as diskstatsfd:
        all_stats = diskstatsfd.read().rstrip().split("\n")
    stats = [x for x in all_stats if args.dev in x][0]
    depth = int(stats.split()[11])

    # Average the queue depth over N iterations to remove spikiness
    if args.average:
        depth = get_average_depth(dev, args.average, depth)

    # Calculate the thresholds (multiply first to maintain precision)
    warn = (nr_requests * args.warn) / 100
    crit = (nr_requests * args.crit) / 100

    code = NAGIOS_OK
    if depth > warn:
        code = NAGIOS_WARNING
    if depth > crit:
        code = NAGIOS_CRITICAL

    status = ['OK', 'WARNING', 'CRITICAL'][code]
    print '{0}: queue depth {1} | depth={1};{2};{3};0;{4}'.\
          format(status, depth, warn, crit, nr_requests)
    sys.exit(code)


if __name__ == '__main__':
    main()


# vi: ts=4 et:
