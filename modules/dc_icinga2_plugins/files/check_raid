#!/usr/bin/env python
"""
Checks for error and warning conditions of software RAID

Parses /proc/mdstat into a generic data structure then applies checks
across the array and device elements.  At present it will raise a critical
alert if an array is inactive or an array device has failed.  Warnings are
raised during recovery and resync operations.
"""

import os
import re
import subprocess
import sys

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3


def parse_mdstat():
    """Parses /proc/mdstat into a generic data structure"""

    with open('/proc/mdstat') as mdstatfd:
        lines = mdstatfd.read().split("\n")

    mdstat = {}
    for line in lines:

        # Match 'md0 : active raid1'
        attributes = re.match(r'(md\d+)\s+:\s+(\w+)\s+(\w+)', line)
        if attributes:

            # Cache array for use with subsequent lines
            array = attributes.group(1)

            # Match 'sda1[0] sdb[1](F)'
            devices_raw = re.findall(r'(sd\w+)\[\d+\](\((\w)\))?', line)

            devices = {}
            for device in devices_raw:
                devices[device[0]] = {
                    'spare': device[2] == 'S',
                    'failed': device[2] == 'F',
                }

            mdstat[array] = {
                'active': attributes.group(2) == 'active',
                'level': attributes.group(3),
                'devices': devices,
            }

        # Record the recovery percentage string for output
        elif 'recovery' in line:
            mdstat[array]['recovery'] = float(line.split()[3][:-1])

        # Record the resync percentage string for ouput
        elif 'resync'  in line:
            if 'DELAYED' in line:
                mdstat[array]['resync'] = 0.0
            else:
                mdstat[array]['resync'] = float(line.split()[3][:-1])

    return mdstat


def parse_cciss():
    """Parses and HP CCISS arrays"""

    binary = '/usr/bin/cciss_vol_status'
    cciss = {}

    if not os.access('/dev/cciss', os.F_OK):
        return cciss
    if not os.access(binary, os.F_OK):
        return cciss

    arrays = [x for x in os.listdir('/dev/cciss') if re.match(r'c\d+d\d+$', x)]

    for array in arrays:
        dev = '/dev/cciss/' + array
        process = subprocess.Popen([binary, dev],
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout = process.communicate()
        cciss[array] = {
            'failed': 'status: OK' not in stdout
        }

    return cciss


def main():
    """Parse mdstat, determine the state and dump out the information"""

    # Gather statistics about all arrays
    mdstat = parse_mdstat()
    cciss = parse_cciss()

    if not (mdstat or cciss):
        print 'OK: no arrays detected'
        sys.exit(NAGIOS_OK)

    # Iterate through all arrays and devices gathering interesting
    # statistics
    inactive = []
    recovery = []
    resync = []
    failed = []
    perfdata = ""

    for array in mdstat:
        synchronisation = 100.0
        if not mdstat[array]['active']:
            inactive.append(array)
        if 'resync' in mdstat[array]:
            resync.append('{} = {}%'.format(array, mdstat[array]['resync']))
            synchronisation = mdstat[array]['resync']
        if 'recovery' in mdstat[array]:
            recovery.append('{} = {}%'.format(array, mdstat[array]['recovery']))
            synchronisation = mdstat[array]['recovery']
        for device in mdstat[array]['devices']:
            if mdstat[array]['devices'][device]['failed']:
                failed.append(device)
        perfdata = perfdata + ' {}_synchronisation={}%'.\
                   format(array, synchronisation)

    cciss_failed = []
    for array in cciss:
        if cciss[array]['failed']:
            cciss_failed.append(array)

    # Calculate the status code
    code = NAGIOS_OK
    if recovery or resync:
        code = NAGIOS_WARNING
    if inactive or failed or cciss_failed:
        code = NAGIOS_CRITICAL

    # Dump out the pertinent information
    mdstat_out = ' [mdstat] inactive {}, recovery {}, resync {}, failed {}'.\
                 format(', '.join(inactive) if inactive else 'none',
                        ', '.join(recovery) if recovery else 'none',
                        ', '.join(resync) if resync else 'none',
                        ', '.join(failed) if failed else 'none')\
                 if mdstat else ''

    cciss_out = ' [cciss] failed {}'.\
                format(', '.join(cciss_failed) if cciss_failed else 'none')\
                if cciss else ''

    status = ['OK', 'WARNING', 'CRITICAL'][code]
    print '{}:{}{}'.format(status, mdstat_out, cciss_out)
    sys.exit(code)


if __name__ == '__main__':
    main()

# vi: ts=4 et:
