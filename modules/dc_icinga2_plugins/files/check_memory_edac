#!/usr/bin/env python
"""
Checks for EDAC Memory Errors

The module checks that the EDAC driver is supported then interrogates each
memory controller, chip-select row and channel.  Initially it only looks
for correctable errors and triggers a warning.
"""

import argparse
import glob
import os
import re
import sys

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

EDAC_DIR = '/sys/devices/system/edac/mc'

def format_label(controller, channel, select):
    """Translates the raw sysfs parameters into a human readable form"""

    # Translate controller and channel to indexed from 1 and translate the
    # channel select to be indexed from A.  This is SuperMicro formatting
    controller += 1
    channel += 1
    select = chr(select + ord('A'))

    return 'CPU{} DIMM-{}{}'.format(controller, channel, select)


def edac_errors():
    """Get global correctable and uncorrectable errors"""

    correctable_errors = 0
    ce_files = glob.glob(EDAC_DIR + '/mc*/ce_count')
    for ce_file in ce_files:
        with open(ce_file) as ce_file_fd:
            correctable_errors += int(ce_file_fd.read())

    uncorrectable_errors = 0
    ue_files = glob.glob(EDAC_DIR + '/mc*/ue_count')
    for ue_file in ue_files:
        with open(ue_file) as ue_file_fd:
            uncorrectable_errors += int(ue_file_fd.read())

    return correctable_errors, uncorrectable_errors


def edac_dimm_errors():
    """A hash of per DIMM EDAC error counts"""

    errors = {}

    # Get a list of all relevant files
    ce_files = glob.glob(EDAC_DIR + '/mc*/csrow*/ch*_ce_count')
    for ce_file in ce_files:

        # Read the correctable errors
        with open(ce_file) as ce_file_fd:
            count = int(ce_file_fd.read())

            # Buffer the ouput
            matches = re.search(r'mc(\d+)/csrow(\d+)/ch(\d+)_ce_count', ce_file)
            label = format_label(*[int(x) for x in matches.group(1, 2, 3)])
            errors[label] = count

    return errors


def main():
    """Probes sysfs for EDAC errors and reports them"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-w', '--warning', type=int, default=100)
    parser.add_argument('-c', '--critical', type=int, default=1000)
    args = parser.parse_args()

    # Check for edac support and ignore the check if not supported
    if not os.access(EDAC_DIR, os.F_OK):
        print 'OK: no edac support detected'
        sys.exit(NAGIOS_OK)

    correctable_errors, uncorrectable_errors = edac_errors()
    dimm_errors = edac_dimm_errors()

    crit = [x for x, y in dimm_errors.items() if y >= args.critical]
    if correctable_errors >= args.critical:
        crit += ['global ce']
    if uncorrectable_errors:
        crit += ['global ue']

    warn = [x for x, y in dimm_errors.items() if y >= args.warning and y < args.critical]
    if correctable_errors >= args.warning and correctable_errors < args.critical:
        warn += ['global ce']

    code = NAGIOS_OK
    if crit:
        code = NAGIOS_CRITICAL
    elif warn:
        code = NAGIOS_WARNING

    perfdata = []
    perfdata.append('\'global ce\'={};{};{}'.\
                    format(correctable_errors, args.warning, args.critical))
    perfdata.append('\'global ue\'={};{};{}'.\
                    format(uncorrectable_errors, args.warning, args.critical))
    for label, count in dimm_errors.items():
        perfdata.append('\'{}\'={};{};{}'.\
                        format(label, count, args.warning, args.critical))

    status = ['OK', 'WARNING', 'CRITICAL'][code]
    print '{}: warning={} critical={} | {}'.\
          format(status, len(warn), len(crit), ' '.join(perfdata))
    sys.exit(code)


if __name__ == '__main__':
    main()

# vi: ts=4 et:
