#!/usr/bin/env python
"""
Keystone monitoring script for Nagios

Copyright 2012 eNovance <licensing@enovance.com>

Author: Julien Danjou <julien@danjou.info>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import argparse
import sys
from keystoneauth1 import session
from keystoneauth1.identity import v3
from keystoneclient import exceptions
from keystoneclient.v3 import client

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3


def main():
    """Checks that a test user is able to authenticate"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--host', required=True)
    parser.add_argument('-u', '--username', required=True)
    parser.add_argument('-p', '--password', required=True)
    parser.add_argument('-P', '--project', required=True)
    parser.add_argument('-d', '--domain', default='Default')
    parser.add_argument('-r', '--region')
    parser.add_argument('-a', '--admin', action='store_true')
    parser.add_argument('-s', '--service', action='append')
    args = parser.parse_args()

    try:
        auth = v3.Password(user_domain_name=args.domain,
                           username=args.username,
                           password=args.password,
                           project_domain_name=args.domain,
                           project_name=args.project,
                           auth_url=args.host)
        sess = session.Session(auth=auth)
        keystone = client.Client(session=sess)
    except exceptions.AuthorizationFailure:
        print 'CRITICAL: unable to establish connection'
        sys.exit(NAGIOS_CRITICAL)

    # Checks that an admin can get a list of all projects
    if args.admin and not keystone.projects.list():
        print 'CRITICAL: project list is empty'
        sys.exit(NAGIOS_CRITICAL)

    # Checks that endpoints for all requested services exist
    msgs = []

    services = keystone.services.list()
    service_type_map = {}
    for service in services:
        service_type_map[service.type] = service.id

    if args.service:
        service_type_map = {k: service_type_map[k] for k in service_type_map if k in args.service}
        for service in args.service:
            if service not in service_type_map.keys():
                msgs.append("'{}' service is missing".format(service))

    endpoints = keystone.endpoints.list()

    for service_type in service_type_map:
        service_endpoints = [x for x in endpoints if x.service_id == service_type_map[service_type]]
        if not service_endpoints:
            msgs.append("'{}' has no endpoints".format(service_type))
            continue

        if not [x for x in service_endpoints if x.interface == u'public']:
            msgs.append("'{}' has no public interface".format(service_type))

    if msgs:
        print ", ".join(msgs)
        sys.exit(NAGIOS_WARNING)

    print "OK: user %s and tenant %s" % (args.username, args.project)
    sys.exit(NAGIOS_OK)


if __name__ == '__main__':
    main()

# vi: ts=4 et:
