#!/usr/bin/env python

"""
Checks nova service is running and has a connection to the
message broker
"""

import argparse
import os
import re
import sys

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3

def pgrep(string):
    """Search proc for the PIDs featuring the search string"""

    script_name = os.path.basename(__file__)

    pids = [int(x) for x in os.listdir('/proc') if x.isdigit()]

    def pid_filter(pid):
        """Return only pids featuring the desired process string"""
        try:
            with open('/proc/{}/cmdline'.format(pid)) as cmd_file:
                cmd = cmd_file.read()
        except IOError:
            return False
        return string in cmd and script_name not in cmd

    return filter(pid_filter, pids)


def get_root_pid(string):
    """Return the first PID whose parent isn't the same executable"""

    pids = pgrep(string)

    def parent_pid_filter(pid):
        """Return only PIDs whose parent isn't also in the list"""
        try:
            with open('/proc/{}/stat'.format(pid)) as stat_file:
                stat = stat_file.read()
        except IOError:
            return False
        return int(stat.split()[3]) not in pids

    pids = filter(parent_pid_filter, pids)

    return pids and pids[0] or 0


def get_child_pid(ppid):
    """Search proc for the first child PID of the specified parent"""

    pids = [int(x) for x in os.listdir('/proc') if re.match(r'^\d+$', x)]
    for pid in pids:
        # Handle processes terminating
        try:
            with open('/proc/{}/stat'.format(pid)) as stat_file:
                stat = stat_file.read()
        except IOError:
            continue

        if int(stat.split()[3]) == ppid:
            return int(stat.split()[0])

    return 0


def get_sockets(pid):
    """Given the PID find a list of open TCP sockets"""

    descs = os.listdir('/proc/{}/fd'.format(pid))
    sockets = []
    for desc in descs:
        try:
            target = os.readlink('/proc/{}/fd/{}'.format(pid, desc))
        except OSError:
            continue
        matches = re.match(r'^socket:\[(\d+)\]$', target)
        if matches:
            sockets.append(int(matches.group(1)))

    return sockets


def has_remote_connection(sockets, port):
    """Checks whether the specified process has a connection to the port"""

    with open('/proc/net/tcp') as tcp_file:
        # First line is headers, last is blank, so discard
        tcp_lines = tcp_file.read().split("\n")[1:-1]

    for tcp in tcp_lines:
        fields = tcp.split()
        inode = int(fields[9])
        if inode in sockets:
            remote = fields[2].split(':')
            if int(remote[1], 16) == port:
                return True

    return False


def main():
    """Finds the process PID then its AMQP connection"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--process', required=True)
    parser.add_argument('-c', '--child', action='store_true')
    args = parser.parse_args()

    pid = get_root_pid(args.process)
    if not pid:
        print 'CRITICAL: service not running'
        sys.exit(NAGIOS_CRITICAL)

    if args.child:
        pid = get_child_pid(pid)
        if not pid:
            print 'CRITICAL: service has no children'
            sys.exit(NAGIOS_CRITICAL)

    sockets = get_sockets(pid)

    if not has_remote_connection(sockets, 5672):
        print 'CRITICAL: service has no AMQP connection'
        sys.exit(NAGIOS_CRITICAL)

    print 'OK'
    sys.exit(NAGIOS_OK)


if __name__ == '__main__':
    main()

# vi: ts=4 et:
