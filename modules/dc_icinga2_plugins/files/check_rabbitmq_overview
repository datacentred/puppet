#!/usr/bin/env python
"""
Monitors the message queue overview
"""

import argparse
import base64
import httplib
import json
import sys

NAGIOS_OK = 0
NAGIOS_WARNING = 1
NAGIOS_CRITICAL = 2
NAGIOS_UNKNOWN = 3


def rabbit_request(args, urn):
    """Performs the API request against the specified URN"""

    auth = 'Basic ' + base64.b64encode(args.username + ':' +args.password)

    connection = httplib.HTTPConnection(args.hostname, args.port)
    connection.request('GET', urn, headers={'Authorization': auth})
    response = connection.getresponse()
    if response.status != 200:
        print 'UNKNOWN: unable to contact server'
        sys.exit(NAGIOS_UNKNOWN)

    return json.loads(response.read())


def main():
    """Polls the overview for queue status"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-H', '--hostname', required=True)
    parser.add_argument('-P', '--port', required=True)
    parser.add_argument('-u', '--username', required=True)
    parser.add_argument('-p', '--password', required=True)
    args = parser.parse_args()

    # Gather the results
    result = rabbit_request(args, '/api/overview')

    # Grap the required statistics
    messages = result['queue_totals']['messages']
    messages_ready = result['queue_totals']['messages_ready']
    messages_unacknowledged = result['queue_totals']['messages_unacknowledged']

    # Perform output
    print 'OK: messages {}, messages ready {}, messages unacknowledged {}'.\
          format(messages, messages_ready, messages_unacknowledged)

    sys.exit(NAGIOS_OK)


if __name__ == '__main__':
    main()

# vi: ts=4 et:
