from errbot import BotPlugin, botcmd
from HTMLParser import HTMLParser
import logging
import re
import subprocess
import random
import urllib2
import json

class MLStripper(HTMLParser):
    """
    Strips all the HTML tags out of a string
    """

    def __init__(self):
        """
        Initialization
        """
        self.reset()
        self.fed = []

    def handle_data(self, data):
        """
        Data, bits on in tags get appended to the list
        """
        self.fed.append(data)

    def handle_entityref(self, ref):
        """
        Hopefully you don't have &amp; and stuff in your username
        or branch titles!!
        """
        logging.warning('[GitBot] warning unhandled entity reference ' + ref)

    def get_data(self):
        """
        Concatenate all the data to get a single string
        """
        return ''.join(self.fed)

class GitHub(BotPlugin):
    """
    GitHub plugin for Marvin Bot running locally on the puppet master
    """

    def get_pony(self):
        """Return a random pony"""
        path = 'http://ponies.<%= @domain %>/'
        resp = urllib2.urlopen(path + 'ponies.json')
        ponies = json.loads(resp.read())
        return path + random.choice(ponies)

    def pull_production(self):
        """Synchronise repos and submodules"""
        # Become the git user and fetch the production branch, this
        # is a bare repository so we need to fast forward the destination
        # reference to that of the source
        # todo: The actual branch name is available in the regex
        #       matches above, probably buggers up with submodules
        subprocess.call(['sudo', '-H', '-u', 'git', 'bash', '-c',
                         'cd /home/git/puppet.git; ' \
                         'git fetch origin master:master'])

        # Likewise mirror changes to the puppet environment
        # todo: The actual branch name is available in the regex
        #       matches above, probably buggers up with submodules
        subprocess.call(['sudo', '-H', '-u', 'git', 'bash', '-c',
                         'cd /etc/puppet/environments/production;' \
                         'git pull;' \
                         'git submodule init;' \
                         'git submodule sync;' \
                         'git submodule update'])

    def callback_message(self, conn, message):
        """
        Process incoming messages and take any action that is required
        """
        # Never hurts to log what we were attempting
        logging.debug('[GitBot] ' + message.getFrom().getNode())
        logging.debug('[GitBot] ' + message.getBody())
        logging.debug('[GitBot] ' + message.getType())

        # Remove all the markup from the body to allow easier parsing
        stripper = MLStripper()
        stripper.feed(message.getBody())
         
        # Okay so we could be a bit fuzzier, this will break first :)
        match = re.match(r'(.+?) pushed to branch (\S+) of (\S+)' \
                         r' - Merge pull request #(\d+) from (\S+)',
                         stripper.get_data())

        if match != None:
            # Provide visual feed back in the channel that we're
            # actually doing something.  Ponies are good for this
            self.send(message.getFrom(), match.group(1) +
                      ' performed a pull request merge',
                      message_type=message.getType())
            self.send(message.getFrom(), self.get_pony(),
                      message_type=message.getType())
            self.pull_production()

    @botcmd
    def pony(self, msg, args):
        """Print a pony! And test the daemon obviously"""
        return self.get_pony()

    @botcmd
    def pull(self, msg, args):
        """Print a pony and sync the repos explicitly"""
        self.pull_production()
        return self.get_pony()
