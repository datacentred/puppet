#!/usr/bin/env python

import MySQLdb,sys

def anydup(list):
    seen = set()
    for x in list:
        if x in seen:
            return ( 1, x )
        seen.add(x)
    return 0

def get_results(cursor,sql):
    try:
        cursor.execute(sql)
        results = cursor.fetchall()
        return results
    except:
        print "Error: Unable to fetch results"
        sys.exit(1)

def db_connect(host,user,password,database):
    try:
        db = MySQLdb.connect(host,user,password,database)
        cursor = db.cursor()
        return ( cursor, db )
    except:
        print "Error: Could not connect to database"
        sys.exit(1)

def main():	

    host='<%= @neutron_host %>'
    user='<%= @neutron_db_user %>'
    password='<%= @neutron_db_pass %>'
    database='<%= @neutron_db %>'
    
    cursor,db=db_connect(host,user,password,database)

    sql = "SELECT network_id,segmentation_id FROM ml2_network_segments WHERE network_type='gre'"
    results=get_results(cursor,sql)

    # Get the segmentation_ids into a list and pass to the dupe check function
    segids = []
    for row in results:
        segids.append(row[1])
    a = anydup(segids)
    if a is not 0 :
        segid_dup = a[1]
        print "WARNING - found duplicate segmentation_id %s" % segid_dup

    # Now check if that segmentation_id is shown as allocated in the ml2_gre_allocation table
    for segid in segids:
        sql="SELECT allocated FROM ml2_gre_allocations WHERE gre_id=%s" % segid
        results=get_results(cursor,sql)
        for row in results:
            allocated = row[0]
            if allocated is not 1:
                print "WARNING - segmentation_id %s is not allocated correctly" % segid

    # Close the db connection
    db.close()

if __name__ == "__main__":
    main()	
