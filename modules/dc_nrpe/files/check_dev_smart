#!/usr/bin/env python

"""
Check SMART status of all available hard drives
"""

import os
import re
import subprocess
import sys

def smart_capable(device):
    """Returns true if a device is smart capable. False otherwise"""

    # check_ide_smart doesn't work on SAS devices behind an LSI expander
    # so filter these out here.
    #
    # You can get the giblets out of sg_io however so I'll need to
    # write this properly at some point getting the data directly with raw
    # SCSI commands... *sigh*
    if os.path.exists('/sys/block/{}/device/sas_address'.format(device)):
        return False

    # Filter out HP Raid and devices which do not support the smart check
    if "c0d0" in device:
        return False

    # Handles devices beneath a DELL PERC controller
    output = subprocess.check_output(['smartctl', '-i', '/dev/' + device])
    matches = re.findall(r'SMART support is:\s+(\w+)', output)
    if 'Unavailable' in matches:
        return False

    return True

def get_devices():
    """Get an array of all supported devices to run checks on"""

    devices = os.listdir('/sys/block')
    devices = [x for x in devices if re.match(r'sd', x)]

    # Filter out HP Raid and devices which do not support the smart check
    return [d for d in devices if smart_capable(d)]

def run_checks(devices):
    """Run smart checks and return the status"""
    statuses = {}
    for device in devices:
        sys.stdout.write('{}: '.format(device))
        sys.stdout.flush()
        code = subprocess.call(['/usr/local/bin/check_ide_smart',
                                '-d', '/dev/' + device])
        statuses[device] = code
    return statuses

def main():
    """Entry point"""

    devices = get_devices()
    statuses = run_checks(devices)

    status = reduce(lambda x, y: x if x > y else y, statuses.values(), 0)
    sys.exit(status)

if __name__ == '__main__':
    main()

# vi: ts=4 et:
